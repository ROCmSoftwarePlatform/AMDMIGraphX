sudo: required
dist: xenial
language: cpp
script: cmake
cache:
    ccache: true
    directories:
        - $HOME/Library/Caches/Homebrew
        - /usr/local/Homebrew
        - deps

matrix:
    include:
        # OSX
        - os: osx
          env: BUILD_TYPE=release
          compiler: clang

        - os: linux
          env: CC=gcc-7 CXX=g++-7 BUILD_TYPE=debug SAN=on COVERAGE=on
          compiler: gcc-7
          addons: &gcc7
            apt:
              packages:
                - ccache
                - g++-7
                - lcov
                - python3-dev
                - python3-pip
                - python3-setuptools
                - realpath
                - util-linux
              sources:
                - ubuntu-toolchain-r-test
        - os: linux
          env: CC=gcc-7 CXX=g++-7 BUILD_TYPE=release
          compiler: gcc-7
          addons: *gcc7

before_cache:
    - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then brew cleanup; fi
    # From https://discourse.brew.sh/t/best-practice-for-homebrew-on-travis-brew-update-is-5min-to-build-time/5215/9
    # Cache only .git files under "/usr/local/Homebrew" so "brew update" does not take 5min every build
    - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then find /usr/local/Homebrew \! -regex ".+\.git.+" -delete; fi

install:
    - export CHECKOUT_PATH=`pwd`
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install ccache; fi
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export PATH="/usr/local/opt/ccache/libexec:$PATH"; fi
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then pyenv versions; fi
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then pyenv global system $(pyenv versions | grep -v system); fi
    # Show compiler info
    - $CXX --version
    - which $CXX
    - $CC --version
    - which $CC
    - which cmake
    - cmake --version
    - which ccache
    - ccache --version
    - python3 --version
    # Add path for mac
    - export PATH="/Users/travis/Library/Python/3.7/bin:$PATH"
    - pip3 install --user cget
    - cget --version
    - export DEPS_KEY=$(md5sum requirements.txt | awk '{print $1}')
    - export DEPS_DIR=${TRAVIS_BUILD_DIR}/deps/$DEPS_KEY
    - cget -p $DEPS_DIR init -DPYTHON_EXECUTABLE=$(which python3)
    - cget -p $DEPS_DIR install pfultz2/rocm-recipes
    - cget -p $DEPS_DIR ignore ROCmSoftwarePlatform/rocBLAS ROCmSoftwarePlatform/MIOpen
    - cget -p $DEPS_DIR install -f requirements.txt
    
script:
    - export CXXFLAGS='-Werror -Wno-fallback -Wno-unknown-warning-option'
    - export SANFLAGS='-fno-omit-frame-pointer -fsanitize-address-use-after-scope -fsanitize=address,undefined -fno-sanitize-recover=address,undefined'
    - if [[ "$SAN" == "on" ]]; then export CXXFLAGS="$CXXFLAGS $SANFLAGS"; fi
    - if [[ "$SAN" == "on" ]]; then export CMAKE_FLAGS="$CMAKE_FLAGS -DCMAKE_EXE_LINKER_FLAGS='-fuse-ld=gold' -DCMAKE_SHARED_LINKER_FLAGS='-fuse-ld=gold' -DMIGRAPHX_ENABLE_PYTHON=Off"; fi
    - if [[ "$COVERAGE" == "on" ]]; then export CXXFLAGS="$CXXFLAGS -fprofile-arcs -ftest-coverage"; fi
    - mkdir build
    - cd build
    - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=$DEPS_DIR/cget/cget.cmake $CMAKE_FLAGS ..
    - make -j$(nproc) all package check
    - |
        if [[ "$COVERAGE" == "on" ]]; then
            lcov --directory . --capture --output-file $(pwd)/coverage.info
            lcov --remove $(pwd)/coverage.info '/usr/*' --output-file $(pwd)/coverage.info
            lcov --list $(pwd)/coverage.info
            curl -s https://codecov.io/bash | bash
            echo "Uploaded"
        fi

